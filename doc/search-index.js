var searchIndex = new Map(JSON.parse('[\
["toml_parser",{"doc":"","t":"PPPPPPPPPPPPPPPPPPPPPGFFFGFPNNNNNNNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNOONNNHOOOONNNONNNNNNNNNNNNNNNNNN","n":["Array","BlockClose","BlockOpen","Bof","Bool","Bool","Comma","Date","Date","Eof","Equals","F64","I64","Ident","Inf","Nan","Num","ObjectClose","ObjectOpen","Str","Str","Toml","TomlErr","TomlParser","TomlSpan","TomlTok","TomlTokWithSpan","U64","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cur","default","eq","eq","eq","eq","err_parse","err_token","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","into","into","into","into","into_str","len","msg","next","next_tok","parse_key_value","parse_toml","pos","span","span","start","to_owned","to_owned","to_val","tok","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"toml_parser"],[102,"core::fmt"],[103,"core::fmt"],[104,"core::option"],[105,"core::str::iter"],[106,"core::result"],[107,"std::collections::hash::map"],[108,"core::any"]],"d":["","","","","","","","","","","","","","","","","","","","","","Node types returned by parsing symbols","Toml parse error structure with position and text","Toml parser state structure","Position of current symbol in parser","Toml symbol types","Symbol currently analyzed by parser with span.","","","","","","","","","","","","","","","","","","","","","","","","Create error message for parse errors","Create error message for lexical errors","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Lexical analyzer for toml language","Parse rule for key/value","Start paring toml text, returning hashmap with resulting â€¦","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[2,7,7,7,7,2,7,7,2,7,7,7,7,7,7,7,2,7,7,7,2,0,0,0,0,0,0,7,9,4,1,6,7,2,9,4,1,6,7,2,1,2,1,2,4,4,1,6,7,2,4,4,9,1,6,7,2,9,4,1,6,7,2,9,4,1,6,7,2,2,1,9,4,4,4,0,4,9,6,1,1,2,4,6,9,4,1,6,7,2,9,4,1,6,7,2,9,4,1,6,7,2],"f":"````````````````````````````{ce{}{}}00000000000{bb}{dd}{{ce}f{}{}}0`{{}h}{{bb}j}{{ll}j}{{nn}j}{{dd}j}{{hA`}Ab}{{hl}Ab}{{AbAd}Af}{{bAd}Af}{{lAd}Af}{{nAd}Af}{{dAd}Af}{cc{}}00000{ce{}{}}00000{d{{Aj{Ah}}}}``{{hAl}f}{{hAl}{{An{lAb}}}}{{hA`AhAl{B`{Ahd}}}{{An{fAb}}}}{A`{{An{{B`{Ahd}}Ab}}}}````55{{hlAl}{{An{dAb}}}}`{c{{An{e}}}{}{}}00000000000{cBb{}}00000","c":[],"p":[[5,"TomlSpan",0],[6,"Toml",0],[1,"unit"],[5,"TomlParser",0],[1,"bool"],[5,"TomlTokWithSpan",0],[6,"TomlTok",0],[1,"str"],[5,"TomlErr",0],[5,"Formatter",102],[8,"Result",102],[5,"String",103],[6,"Option",104],[5,"Chars",105],[6,"Result",106],[5,"HashMap",107],[5,"TypeId",108]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
